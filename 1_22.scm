(define (search-for-primes start end)
  (define (search-iter current end)
    (cond ((> current end) (newline) (display "done"))
          ((even? current) (search-iter (+ current 1) end))
          (else (timed-prime-test current)
                (search-iter (+ current 2) end))))
  (search-iter start end))

(define (timed-prime-test n)
  (define (start-prime-test n start-time)
    (cond ((prime? n) (report-prime true (- (runtime) start-time)))
          (else (report-prime false (- (runtime) start-time)))))
  (define (report-prime found elapsed-time)
    (cond (found (display " is prime. "))
          (else (display " is not prime. ")))
    (display "Elapsed time: ")
    (display elapsed-time))
  (newline)
  (display n)
  (start-prime-test n (runtime)))

(define (prime? n)
  (define (smallest-divisor n)
    (find-divisor n 2))
  (define (find-divisor n test-divisor)
    (cond ((> (square test-divisor) n) n)
          ((divides? test-divisor n) test-divisor)
          (else (find-divisor n (+ test-divisor 1)))))
  (define (divides? a b)
    (= (remainder b a) 0))
  (= n (smallest-divisor n)))

(define (prime2? n)
  (fast-prime? n 100))

(define (fast-prime? n times)
  (cond ((= times 0) true)
        ((fermat-test n) (fast-prime? n (- times 1)))
        (else false)))

(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ 1 (random (- n 1)))))

(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder (square (expmod base (/ exp 2) m))
                    m))
        (else
         (remainder (* base (expmod base (- exp 1) m))
                    m))))
