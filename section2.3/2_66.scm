#lang sicp

(define nil '())

(define (make-record key value)
  (cons key value))
(define (key record)
  (car record))
(define (value record)
  (cdr record))

(define (record tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (make-tree record left right)
  (list record left right))

(define (adjoin r tree)
  (cond ((null? tree) (make-tree r '() '()))
        ((= (key r) (key (record tree))) tree)
        ((< (key r) (key (record tree)))
         (make-tree (record tree)
                    (adjoin r (left-branch tree))
                    (right-branch tree)))
        ((> (key r) (key (record tree)))
         (make-tree (record tree)
                    (left-branch tree)
                    (adjoin r (right-branch tree))))))

(define record1 (make-record 1 "Bob"))
(define record2 (make-record 2 "Bill"))
(define record3 (make-record 3 "Fred"))
(define record4 (make-record 4 "Joe"))
(define record5 (make-record 5 "Billy Bob"))
(define record6 (make-record 6 "Freddy Joe"))
(define record7 (make-record 7 "Dan"))
(define record8 (make-record 8 "Pete"))
(define record9 (make-record 9 "Joe Jack"))

(define tree1 (adjoin record3 (adjoin record7 (adjoin record4 (adjoin record9 (adjoin record6 (make-tree record5 nil nil)))))))

(define (lookup k tree)
  (cond ((null? tree) false)
        ((= k (key (record tree)))
         (record tree))
        ((< k (key (record tree)))
          (lookup k (left-branch tree)))
        ((> k (key (record tree)))
          (lookup k (right-branch tree)))
        (else false)))
