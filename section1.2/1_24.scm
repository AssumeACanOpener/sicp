(define (search-for-primes start end)
  (define (search-iter current end)
    (cond ((> current end)
            (newline) (display "done"))
          (else (cond ((prime? current)
                        (newline)
                        (display current)
                        (display " is prime.")))
                (search-iter (+ current 1) end))))
  (search-iter start end))

(define (prime? n)
  (define (fast-prime? n times)
    (cond ((= times 0) true)
          ((fermat-test n) (fast-prime? n (- times 1)))
          (else false)))
  (define (fermat-test n)
    (define (try-it a)
      (= (expmod a n n) a))
    (try-it (+ 1 (random (- n 1)))))
  (define (expmod base exp m)
    (cond ((= exp 0) 1)
          ((even? exp)
           (remainder (square (expmod base (/ exp 2) m))
                      m))
          (else
           (remainder (* base (expmod base (- exp 1) m))
                      m))))
  (cond ((< n 3)  true)
        (else (fast-prime? n 100))))
